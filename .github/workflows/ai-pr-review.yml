name: AI PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  pull-requests: write # Ensures GITHUB_TOKEN can comment on PRs

jobs:
  ai-review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensures full Git history is available

      - name: Fetch PR Base Branch
        run: |
          BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          echo "Fetching base branch: ${BASE_BRANCH}"
          git fetch origin ${BASE_BRANCH}:${BASE_BRANCH}

      - name: Fetch PR Changes
        run: |
          BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          git diff ${BASE_BRANCH}...HEAD > pr_changes.diff

      - name: Review PR with OpenAI
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          DIFF_CONTENT=$(cat pr_changes.diff)

          RESPONSE=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "gpt-4",
              "messages": [
                {"role": "system", "content": "You are a senior software engineer reviewing pull requests for a TypeScript/Node.js project. Provide meaningful insights, highlight any issues, and suggest improvements."},
                {"role": "user", "content": "Review this PR and provide constructive feedback. Here are the PR changes:\n\n'"$DIFF_CONTENT"'"}
              ]
            }')

          REVIEW_TEXT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')

          # Standardized handling: If AI response is empty, post LGTM
          echo "### AI Review Feedback" > review_comment.md
          if [ -z "$REVIEW_TEXT" ] || [ "$REVIEW_TEXT" == "null" ]; then
            echo "LGTM âœ…" >> review_comment.md
          else
            echo "$REVIEW_TEXT" >> review_comment.md
          fi

      - name: Post AI Review Comment
        uses: mshick/add-pr-comment@v2
        with:
          message-path: review_comment.md
          repo-token: ${{ secrets.GITHUB_TOKEN }} # Uses GitHub's built-in token
